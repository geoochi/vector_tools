# -*- coding: utf-8 -*-

"""
/***************************************************************************
 VectorTools
                                 A QGIS plugin
 Some QGIS vector processing algorithms.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-02-28
        copyright            : (C) 2022 by szchixy
        email                : szchixy@outlook.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'szchixy'
__date__ = '2022-02-28'
__copyright__ = '(C) 2022 by szchixy'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterFeatureSink,
                       QgsExpression,
                       QgsExpressionContext,
                       QgsFeature,
                       QgsLineString,
                       QgsPoint,
                       QgsGeometry,
                       QgsFields)


class CreateLinksFromAPointLayer(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OUTPUT = 'OUTPUT'
    INPUT = 'INPUT'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # We add the input vector features source. It can have any kind of
        # geometry.
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.INPUT,
                self.tr('Input layer (Point)'),
                [QgsProcessing.TypeVectorPoint]
            )
        )

        # We add a feature sink in which to store our processed features (this
        # usually takes the form of a newly created vector layer when the
        # algorithm is run in QGIS).
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT,
                self.tr('Output layer (LineString)')
            )
        )

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        source = self.parameterAsSource(parameters, self.INPUT, context)
        (sink, dest_id) = self.parameterAsSink(parameters, self.OUTPUT,
                context, QgsFields(), 2, source.sourceCrs())

        total = source.featureCount() - 1
        features = list(source.getFeatures())

        ex = QgsExpression('$x')
        ey = QgsExpression('$y')
        context_source_layer = QgsExpressionContext()
        context_source_layer.appendScope(source.createExpressionContextScope())
        
        context_source_layer.setFeature(features[0])
        x1 = ex.evaluate(context_source_layer)
        y1 = ey.evaluate(context_source_layer)

        for index in range(total):
            if feedback.isCanceled():
                break

            context_source_layer.setFeature(features[index + 1])
            x2 = ex.evaluate(context_source_layer)
            y2 = ey.evaluate(context_source_layer)

            f = QgsFeature()
            line = QgsLineString(QgsPoint(x1, y1), QgsPoint(x2, y2))
            x1, y1 = x2, y2
            f.setGeometry(QgsGeometry.fromPolyline(line))
            sink.addFeature(f, QgsFeatureSink.FastInsert)

            feedback.setProgress(int((index + 1) / total * 100))

        return {self.OUTPUT: dest_id}

    def shortHelpString(self):
        """
        Returns a localised short helper string for the algorithm. This string
        should provide a basic description about what the algorithm does and the
        parameters and outputs associated with it..
        """
        return self.tr("Input layer (Point) 输入一个 Point/MultiPoint 图层\n\nOutput layer (LineString) 输出一个 LineString 图层")

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'CreateLinksFromAPointLayer'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    # def group(self):
    #     """
    #     Returns the name of the group this algorithm belongs to. This string
    #     should be localised.
    #     """
    #     return self.tr(self.groupId())

    # def groupId(self):
    #     """
    #     Returns the unique ID of the group this algorithm belongs to. This
    #     string should be fixed for the algorithm, and must not be localised.
    #     The group id should be unique within each provider. Group id should
    #     contain lowercase alphanumeric characters only and no spaces or other
    #     formatting characters.
    #     """
    #     return 'default'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return CreateLinksFromAPointLayer()
